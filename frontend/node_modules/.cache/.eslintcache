[{"C:\\Users\\Jorge Vieira\\Documents\\GitHub\\API_Shoes\\frontend\\src\\index.js":"1","C:\\Users\\Jorge Vieira\\Documents\\GitHub\\API_Shoes\\frontend\\src\\App.js":"2"},{"size":228,"mtime":1646989474181,"results":"3","hashOfConfig":"4"},{"size":17298,"mtime":1647594477036,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","suppressedMessages":"8","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"qje8me",{"filePath":"9","messages":"10","suppressedMessages":"11","errorCount":0,"fatalErrorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},"C:\\Users\\Jorge Vieira\\Documents\\GitHub\\API_Shoes\\frontend\\src\\index.js",[],[],"C:\\Users\\Jorge Vieira\\Documents\\GitHub\\API_Shoes\\frontend\\src\\App.js",["13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31","32","33","34","35"],[],"import './App.css';\r\nimport axios from 'axios';\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nfunction App() {\r\n  // API Connection\r\n  const [page, setPage] = useState(1);\r\n  const urlAPI = \"https://localhost:44384/api/Products?page=\" + page;\r\n\r\n  const [data, setData] = useState([]);\r\n\r\n  const [productDB, setProductDB] = useState([]);\r\n\r\n    // Window Create\r\n    const [showCreate, setShowCreate] = useState(false);\r\n    const [showDelete, setShowDelete] = useState(false);\r\n    const [showEdit, setShowEdit] = useState(false);\r\n    const [showSearch, setShowSearch] = useState(false);\r\n  \r\n    const [filteredResults, setFilteredResults] = useState([]);\r\n\r\n    \r\n  const [produto, setProduto] = useState([]);\r\n  \r\n  const [showErroNoID, setShowErroNoId] = useState(false);\r\n  const [showTable, setShowTable] = useState(true);\r\n\r\n  const [showInputId, setShowInputId] = useState(false);\r\n  const [showInputName, setShowInputName] = useState(false);\r\n  const [showSearchInput, setShowSearchInput] = useState(true);\r\n  const [showNoProducts, setShowNoProducts] = useState(false);\r\n\r\n  // Create the state of productInfoSelected\r\n  const [productInfoSelected, setProductInfoSelected] = useState({\r\n    id: '',\r\n    name: '',\r\n    description: '',\r\n    price: ''\r\n  });\r\n\r\n\r\n\r\n\r\n  // Save the productDB that the user will insert into the form\r\n  // Uses setProductInfoSelected to update the state\r\n  const inputProductData = e => {\r\n    const { name, value } = e.target;\r\n    setProductInfoSelected({\r\n      ...productInfoSelected, [name]: value\r\n    });\r\n  }\r\n\r\n  const [totalpages, setTotalPages] = useState(0);\r\n\r\n  const requestGet = async () => {\r\n    await axios.get(urlAPI)\r\n      .then(response => {\r\n        setData(response.data.products);\r\n        setTotalPages(response.data.pages);\r\n      }).catch(() => {\r\n        toast.error('Please contact an administrator!');\r\n      });\r\n  }\r\n\r\n  const requestPost = async () => {\r\n    delete productInfoSelected.id;\r\n    if (productInfoSelected.name == \"\" || productInfoSelected.description == \"\" || productInfoSelected.price == \"\") {\r\n      toast.error('Please, fill  all fields!');\r\n      return;\r\n    }\r\n\r\n    if (productInfoSelected.price.includes(',')) {\r\n      const priceReplaced = productInfoSelected.price.replace(',', '.');\r\n      productInfoSelected.price = priceReplaced;\r\n    }\r\n\r\n    if (isNaN(productInfoSelected.price)) {\r\n      toast.error('The price has to be a number.');\r\n      return;\r\n    }\r\n\r\n    productInfoSelected.price = parseFloat(productInfoSelected.price)\r\n    await axios.post(urlAPI, productInfoSelected)\r\n      .then(response => {\r\n        setProductDB(productDB.concat(response.data));\r\n        setShowCreate(false);\r\n        setFilteredResults(\"\");\r\n        toast.success('A new product with the id ' + response.data.id + ' has been created!');\r\n        requestGet();\r\n      }).catch(() => {\r\n        toast.error('We werenÂ´t able to create the product');\r\n      });\r\n  }\r\n\r\n  const requestDelete = async (id) => {\r\n    const urlWithId = (\"https://localhost:44384/api/Products/\" + id);\r\n    await axios.delete(urlWithId)\r\n      .then(response => {\r\n        setShowDelete(false);\r\n        toast.success('The product with the id ' + id + ' was deleted');\r\n        if(response.data == true && data.length == 1){\r\n           if(page != 1){\r\n              setPage(page - 1);\r\n           }else{\r\n            setShowNoProducts(true);\r\n           }\r\n        }\r\n        requestGet();\r\n      }).catch(error => {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  const requestPut = async () => {\r\n    if (productInfoSelected.name == \"\" || productInfoSelected.description == \"\" || productInfoSelected.price == \"\") {\r\n      toast.error('Please, fill  all fields!');\r\n      return;\r\n    }\r\n    if (productInfoSelected.price.toString().includes(',', 0)) {\r\n      const priceReplaced = productInfoSelected.price.replace(',', '.');\r\n      productInfoSelected.price = priceReplaced;\r\n    }\r\n    if (isNaN(productInfoSelected.price)) {\r\n      toast.error('The price has to be a number.');\r\n      return;\r\n    }\r\n\r\n    productInfoSelected.price = parseFloat(productInfoSelected.price)\r\n\r\n    const urlEdit = (\"https://localhost:44384/api/Products/\" + productInfoSelected.id);\r\n    await axios.put(urlEdit, productInfoSelected)\r\n      .then(response => {\r\n        productDB.map(product => {\r\n          if (product.id === productInfoSelected.id) {\r\n            product.name = response.data.name;\r\n            product.description = response.data.description;\r\n            product.price = response.data.price;\r\n          }\r\n        });\r\n        requestGet();\r\n        setShowEdit(false);\r\n        toast.success('The product with the id ' + productInfoSelected.id + ' was edited');\r\n      }).catch(error => {\r\n        console.log(error);\r\n      })\r\n  }\r\n\r\n  const selectProduct = (product, type) => {\r\n    setProductInfoSelected(product);\r\n    if (type == \"Delete\") {\r\n      setShowDelete(true);\r\n    } else if (type == \"Edit\") {\r\n      setShowEdit(true);\r\n    }\r\n  }\r\n\r\n  const requestFindById = async (searchId) => {\r\n    const urlFind = (urlAPI + \"/ProductById?id=\" + searchId);\r\n    await axios.get(urlFind)\r\n      .then(response => {\r\n        setShowErroNoId(false);\r\n        setShowTable(true);\r\n        if (searchId !== '') {\r\n          setProduto(response.data);\r\n          setFilteredResults(\" \");\r\n        } else {\r\n          setFilteredResults(\"\");\r\n        }\r\n      }).catch(() => {\r\n        if (searchId == '') {\r\n          setShowTable(true);\r\n          setFilteredResults(\"\");\r\n        } else {\r\n          setShowTable(false);\r\n          setShowErroNoId(true);\r\n        }\r\n      })\r\n  }\r\n\r\n  const requestSearch = async (search) => {\r\n    const urlFind = (urlAPI + \"/GetAll?search=\" + search);\r\n    await axios.get(urlFind)\r\n      .then(response => {\r\n        setShowErroNoId(false);\r\n        setShowTable(true);\r\n        if (search !== '') {\r\n          setProduto(response.data);\r\n          setFilteredResults(\" \");\r\n        } else {\r\n          setFilteredResults(\"\");\r\n        }\r\n      }).catch(() => {\r\n        if (search == '') {\r\n          setShowTable(true);\r\n          setFilteredResults(\"\");\r\n        } else {\r\n          setShowTable(false);\r\n          setShowErroNoId(true);\r\n        }\r\n      })\r\n  }\r\n\r\n  const requestFindByName = async (searchName) => {\r\n    const urlFind = (urlAPI + \"/ProductByName?name=\" + searchName);\r\n    await axios.get(urlFind)\r\n      .then(response => {\r\n        setShowErroNoId(false);\r\n        setShowTable(true);\r\n        if (searchName !== '') {\r\n          setProduto(response.data);\r\n          setFilteredResults(\" \");\r\n        } else {\r\n          setFilteredResults(\"\");\r\n        }\r\n      }).catch(() => {\r\n        if (searchName == '') {\r\n          setShowTable(true);\r\n          setFilteredResults(\"\");\r\n        } else {\r\n          setShowTable(false);\r\n          setShowErroNoId(true);\r\n        }\r\n      })\r\n  }\r\n\r\n  const changeOptionSearch = async (searchOption) => {\r\n    if(searchOption == \"id\"){\r\n      setShowInputId(true);\r\n      setShowInputName(false);\r\n      setShowSearchInput(false);\r\n      setShowErroNoId(false);\r\n      return;\r\n    }\r\n\r\n    if(searchOption == \"name\"){\r\n      setShowInputName(true);\r\n      setShowInputId(false);\r\n      setShowSearchInput(false);\r\n      setShowErroNoId(false);\r\n      return;\r\n    }\r\n\r\n    if(searchOption == \"all\"){\r\n      setShowSearchInput(true);\r\n      setShowInputId(false);\r\n      setShowInputName(false);\r\n      setShowErroNoId(false);\r\n      return;\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    requestGet();\r\n  }, [page]);\r\n\r\n\r\n  // if(page > totalpages){\r\n  //   window.location.replace(\"https://localhost:44384/api/Products?page=1\");\r\n  // }\r\n\r\n  function CheckPages() {\r\n    if(page <= 1 && page + 1 > totalpages){\r\n      return <div className=\"btn-Page\">\r\n          <button onClick={() => setPage(page - 1)} disabled>Previous</button>\r\n          <button className='btnCurrentPage'>{page}</button>\r\n          <button onClick={() => setPage(page + 1)} disabled>Next</button>\r\n      </div>;\r\n      }\r\n      \r\n\r\n    if(page + 1 > totalpages){\r\n      return <div className=\"btn-Page\">\r\n      <button onClick={() => setPage(page - 1)}>Previous</button>\r\n      <button className='btnCurrentPage'>{page}</button>\r\n      <button onClick={() => setPage(page + 1)} disabled>Next</button>\r\n  </div>;\r\n    }\r\n\r\n    if(page <= 1){\r\n    return <div className=\"btn-Page\">\r\n        <button onClick={() => setPage(page - 1)} disabled>Previous</button>\r\n        <button className='btnCurrentPage'>{page}</button>\r\n        <button onClick={() => setPage(page + 1)}>Next</button>\r\n    </div>;\r\n    }\r\n\r\n    if(page){\r\n      return <div className=\"btn-Page\">\r\n          <button onClick={() => setPage(page - 1)}>Previous</button>\r\n          <button className='btnCurrentPage'>{page}</button>\r\n          <button onClick={() => setPage(page + 1)}>Next</button>\r\n      </div>;\r\n      }\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <ToastContainer />\r\n      <div className=\"tableContainer\">\r\n        <div className=\"tableHeader\">\r\n          <h1>Products</h1>\r\n        </div>\r\n        <button className=\"btn createNew\" onClick={() => setShowCreate(true)}>Create New Product</button>\r\n\r\n        <div className=\"searchItems\">\r\n          {\r\n            showSearchInput ?\r\n              <input className=\"search todo\" type=\"text\" placeholder=\"Search...\" name=\"search\" autoComplete=\"off\" onInput={(e) => requestSearch(e.target.value)} />\r\n              : null\r\n          }\r\n          {\r\n            showInputId ?\r\n              <input className=\"search soId\" type=\"text\" placeholder=\"Search ID...\" name=\"searchId\" autoComplete=\"off\" onInput={(e) => requestFindById(e.target.value)} />\r\n              : null\r\n          }\r\n\r\n          {\r\n            showInputName ?\r\n              <input className=\"search soNome\" type=\"text\" placeholder=\"Search Name...\" name=\"searchName\" autoComplete=\"off\" onInput={(e) => requestFindByName(e.target.value)} />\r\n              : null\r\n          }\r\n\r\n          <select name=\"optionSearch\" defaultValue={'all'} className=\"search search-options\" onChange={(e) => changeOptionSearch(e.target.value)}>\r\n            <option value=\"all\">All</option>\r\n            <option value=\"id\">Id</option>\r\n            <option value=\"name\">Name</option>\r\n          </select>\r\n        </div>\r\n\r\n        {\r\n          showTable ?\r\n            <table>\r\n              <thead>\r\n                <tr>\r\n                  <th>Id</th>\r\n                  <th>Name</th>\r\n                  <th>Description</th>\r\n                  <th>Price</th>\r\n                  <th>Options</th>\r\n                </tr>\r\n              </thead>\r\n              {filteredResults.length == 0 ? (\r\n                <tbody>\r\n                  {data.map(product => (\r\n                    <tr key={product.id}>\r\n                      <td>{product.id}</td>\r\n                      <td>{product.name}</td>\r\n                      <td>{product.description}</td>\r\n                      <td>{product.price}</td>\r\n                      <td>\r\n                        <button className=\"btn edit-btn\" onClick={() => selectProduct(product, \"Edit\")}>Edit</button>\r\n                        <button className=\"btn delete-btn\" onClick={() => selectProduct(product, \"Delete\")}>Delete</button>\r\n                      </td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              ) : (\r\n                <tbody>\r\n                  {data.map(product => (\r\n                    <tr key={product.id}>\r\n                      <td>{product.id}</td>\r\n                      <td>{product.name}</td>\r\n                      <td>{product.description}</td>\r\n                      <td>{product.price}</td>\r\n                      <td>\r\n                        <button className=\"btn edit-btn\" onClick={() => selectProduct(product, \"Edit\")}>Edit</button>\r\n                        <button className=\"btn delete-btn\" onClick={() => selectProduct(product, \"Delete\")}>Delete</button>\r\n                      </td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              )}\r\n            </table> : null\r\n        }\r\n\r\n{\r\n          showNoProducts ?\r\n            <div className='errorFindId'>\r\n              <p>We didnÂ´t find a product any products.</p>\r\n            </div> : null\r\n        }\r\n\r\n<CheckPages />\r\n\r\n        {\r\n          showErroNoID ?\r\n            <div className='errorFindId'>\r\n              <p>We didnÂ´t find a product with the that data.</p>\r\n            </div> : null\r\n        }\r\n      </div>\r\n\r\n      {\r\n        showCreate ?\r\n          <div className=\"modalWindow\">\r\n            <div className=\"containerModal\">\r\n              <div className=\"modalTitle\"><h3>Create New Product</h3></div>\r\n              <div className=\"modalBody\">\r\n                <div className=\"modalItem\">\r\n                  <label htmlFor=\"name\">Name:</label>\r\n                  <input type=\"text\" id=\"name\" name=\"name\" onChange={inputProductData} />\r\n                </div>\r\n                <div className=\"modalItem\">\r\n                  <label htmlFor=\"description\">Description:</label>\r\n                  <input type=\"text\" id=\"description\" name=\"description\" onChange={inputProductData} />\r\n                </div>\r\n                <div className=\"modalItem\">\r\n                  <label htmlFor=\"price\">Price:</label>\r\n                  <input type=\"text\" id=\"price\" name=\"price\" onChange={inputProductData} />\r\n                </div>\r\n              </div>\r\n              <div className=\"modalBtns\">\r\n                <button className=\"btn createNew\" onClick={() => requestPost()}>Create</button>\r\n                <button className=\"btn cancelBtn\" onClick={() => setShowCreate(false)}>Cancel</button>\r\n              </div>\r\n            </div>\r\n          </div> : null\r\n      }\r\n\r\n      {\r\n        showDelete ?\r\n          <div className=\"modalWindow\">\r\n            <div className=\"containerModal\">\r\n              <div className=\"modalTitle\"><h3>Delete Product</h3></div>\r\n              <div className=\"modalBody\">\r\n                <div className=\"modalItem\">\r\n                  <span>Are you sure you want to delete the product with id: {productInfoSelected.id}</span>\r\n                </div>\r\n              </div>\r\n              <div className=\"modalBtns\">\r\n                <button className=\"btn cancelBtn\" onClick={() => requestDelete(parseInt(productInfoSelected.id))}>Delete</button>\r\n                <button className=\"btn createNew\" onClick={() => setShowDelete(false)}>Cancel</button>\r\n              </div>\r\n            </div>\r\n          </div> : null\r\n      }\r\n\r\n      {\r\n        showEdit ?\r\n          <div className=\"modalWindow\">\r\n            <div className=\"containerModal\">\r\n              <div className=\"modalTitle\"><h3>Edit Product - {productInfoSelected.id}</h3></div>\r\n              <div className=\"modalBody\">\r\n                <div className=\"modalItem\">\r\n                  <label htmlFor=\"name\">Name:</label>\r\n                  <input type=\"text\" id=\"name\" name=\"name\" value={productInfoSelected.name} onChange={inputProductData} />\r\n                </div>\r\n                <div className=\"modalItem\">\r\n                  <label htmlFor=\"description\">Description:</label>\r\n                  <input type=\"text\" id=\"description\" name=\"description\" value={productInfoSelected.description} onChange={inputProductData} />\r\n                </div>\r\n                <div className=\"modalItem\">\r\n                  <label htmlFor=\"price\">Price:</label>\r\n                  <input type=\"text\" id=\"price\" name=\"price\" value={productInfoSelected.price} onChange={inputProductData} />\r\n                </div>\r\n              </div>\r\n              <div className=\"modalBtns\">\r\n                <button className=\"btn createNew\" onClick={() => requestPut(parseInt(productInfoSelected.id))}>Save</button>\r\n                <button className=\"btn cancelBtn\" onClick={() => setShowEdit(false)}>Cancel</button>\r\n              </div>\r\n            </div>\r\n          </div> : null\r\n      }\r\n\r\n      {\r\n        showSearch ?\r\n          <div className=\"modalWindow\">\r\n            <div className=\"containerModal\">\r\n              <div className=\"modalTitle\"><h3>Product - </h3></div>\r\n              <div className=\"modalBody\">\r\n                <div className=\"modalItem\">\r\n                  <label htmlFor=\"name\">Name:</label>\r\n                  <input type=\"text\" id=\"name\" name=\"name\" />\r\n                </div>\r\n                <div className=\"modalItem\">\r\n                  <label htmlFor=\"description\">Description:</label>\r\n                  <input type=\"text\" id=\"description\" name=\"description\" />\r\n                </div>\r\n                <div className=\"modalItem\">\r\n                  <label htmlFor=\"price\">Price:</label>\r\n                  <input type=\"text\" id=\"price\" name=\"price\" />\r\n                </div>\r\n              </div>\r\n              <div className=\"modalBtns\">\r\n                <button className=\"btn createNew\">Save</button>\r\n                <button className=\"btn cancelBtn\">Cancel</button>\r\n              </div>\r\n            </div>\r\n          </div> : null\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n",{"ruleId":"36","severity":1,"message":"37","line":3,"column":38,"nodeType":"38","messageId":"39","endLine":3,"endColumn":44},{"ruleId":"36","severity":1,"message":"40","line":20,"column":24,"nodeType":"38","messageId":"39","endLine":20,"endColumn":37},{"ruleId":"36","severity":1,"message":"41","line":25,"column":10,"nodeType":"38","messageId":"39","endLine":25,"endColumn":17},{"ruleId":"42","severity":1,"message":"43","line":69,"column":34,"nodeType":"44","messageId":"45","endLine":69,"endColumn":36},{"ruleId":"42","severity":1,"message":"43","line":69,"column":75,"nodeType":"44","messageId":"45","endLine":69,"endColumn":77},{"ruleId":"42","severity":1,"message":"43","line":69,"column":110,"nodeType":"44","messageId":"45","endLine":69,"endColumn":112},{"ruleId":"42","severity":1,"message":"43","line":103,"column":26,"nodeType":"44","messageId":"45","endLine":103,"endColumn":28},{"ruleId":"42","severity":1,"message":"43","line":103,"column":49,"nodeType":"44","messageId":"45","endLine":103,"endColumn":51},{"ruleId":"42","severity":1,"message":"46","line":104,"column":20,"nodeType":"44","messageId":"45","endLine":104,"endColumn":22},{"ruleId":"42","severity":1,"message":"43","line":117,"column":34,"nodeType":"44","messageId":"45","endLine":117,"endColumn":36},{"ruleId":"42","severity":1,"message":"43","line":117,"column":75,"nodeType":"44","messageId":"45","endLine":117,"endColumn":77},{"ruleId":"42","severity":1,"message":"43","line":117,"column":110,"nodeType":"44","messageId":"45","endLine":117,"endColumn":112},{"ruleId":"47","severity":1,"message":"48","line":135,"column":31,"nodeType":"49","messageId":"50","endLine":135,"endColumn":33},{"ruleId":"42","severity":1,"message":"43","line":152,"column":14,"nodeType":"44","messageId":"45","endLine":152,"endColumn":16},{"ruleId":"42","severity":1,"message":"43","line":154,"column":21,"nodeType":"44","messageId":"45","endLine":154,"endColumn":23},{"ruleId":"42","severity":1,"message":"43","line":172,"column":22,"nodeType":"44","messageId":"45","endLine":172,"endColumn":24},{"ruleId":"42","severity":1,"message":"43","line":195,"column":20,"nodeType":"44","messageId":"45","endLine":195,"endColumn":22},{"ruleId":"42","severity":1,"message":"43","line":218,"column":24,"nodeType":"44","messageId":"45","endLine":218,"endColumn":26},{"ruleId":"42","severity":1,"message":"43","line":229,"column":21,"nodeType":"44","messageId":"45","endLine":229,"endColumn":23},{"ruleId":"42","severity":1,"message":"43","line":237,"column":21,"nodeType":"44","messageId":"45","endLine":237,"endColumn":23},{"ruleId":"42","severity":1,"message":"43","line":245,"column":21,"nodeType":"44","messageId":"45","endLine":245,"endColumn":23},{"ruleId":"51","severity":1,"message":"52","line":256,"column":6,"nodeType":"53","endLine":256,"endColumn":12,"suggestions":"54"},{"ruleId":"42","severity":1,"message":"43","line":344,"column":39,"nodeType":"44","messageId":"45","endLine":344,"endColumn":41},"no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","'setShowSearch' is assigned a value but never used.","'produto' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'requestGet'. Either include it or remove the dependency array.","ArrayExpression",["55"],{"desc":"56","fix":"57"},"Update the dependencies array to be: [page, requestGet]",{"range":"58","text":"59"},[7714,7720],"[page, requestGet]"]